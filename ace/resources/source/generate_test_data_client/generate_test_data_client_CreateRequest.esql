

CREATE COMPUTE MODULE generate_test_data_client_CreateRequest
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
				
		-- Read query string
        DECLARE queryString REFERENCE TO InputLocalEnvironment.HTTP.Input.QueryString;
       
        CREATE LASTCHILD OF OutputRoot DOMAIN('JSON') NAME 'JSON';
        CREATE LASTCHILD OF OutputRoot.JSON NAME 'Data';
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME 'Request';
		DECLARE hasType BOOLEAN FALSE;
		
        DECLARE pairs REFERENCE TO queryString.*[1];
        WHILE LASTMOVE(pairs) DO
		    CREATE LASTCHILD OF OutputRoot.JSON.Data.Request NAME FIELDNAME(pairs) VALUE FIELDVALUE(pairs);
		    IF FIELDNAME(pairs) = 'type' THEN
		        SET hasType = TRUE;
		    END IF;
		    MOVE pairs NEXTSIBLING;
		END WHILE;		
				
		IF NOT hasType THEN
			
			DELETE FIELD OutputRoot.JSON;
			
			SET OutputRoot.HTTPReplyHeader."Content-Type" = 'application/json';
			SET OutputLocalEnvironment.Destination.HTTP.ReplyStatusCode = 400;
			CREATE LASTCHILD OF OutputRoot DOMAIN('JSON') NAME 'JSON';
			CREATE LASTCHILD OF OutputRoot.JSON NAME 'Data';
    		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME 'error' VALUE 'Missing required parameter: type';
			
		    PROPAGATE TO TERMINAL 'out1';
		    RETURN FALSE;
		END IF;
        
        PROPAGATE TO TERMINAL 'out';		
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
